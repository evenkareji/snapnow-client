/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/login",{

/***/ "./node_modules/styled-jsx/dist/index/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/styled-jsx/dist/index/index.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n/*\nBased on Glamor's sheet\nhttps://github.com/threepointone/glamor/blob/667b480d31b3721a905021b26e1290ce92ca2879/src/sheet.js\n*/\n\n\n_c = React__default;\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar isProd = typeof process !== \"undefined\" && process.env && false;\n\nvar isString = function (o) {\n  return Object.prototype.toString.call(o) === \"[object String]\";\n};\n\nvar StyleSheet = /*#__PURE__*/function () {\n  function StyleSheet(param) {\n    var ref = param === void 0 ? {} : param,\n        _name = ref.name,\n        name = _name === void 0 ? \"stylesheet\" : _name,\n        _optimizeForSpeed = ref.optimizeForSpeed,\n        optimizeForSpeed = _optimizeForSpeed === void 0 ? isProd : _optimizeForSpeed;\n    invariant$1(isString(name), \"`name` must be a string\");\n    this._name = name;\n    this._deletedRulePlaceholder = \"#\" + name + \"-deleted-rule____{}\";\n    invariant$1(typeof optimizeForSpeed === \"boolean\", \"`optimizeForSpeed` must be a boolean\");\n    this._optimizeForSpeed = optimizeForSpeed;\n    this._serverSheet = undefined;\n    this._tags = [];\n    this._injected = false;\n    this._rulesCount = 0;\n    var node =  true && document.querySelector('meta[property=\"csp-nonce\"]');\n    this._nonce = node ? node.getAttribute(\"content\") : null;\n  }\n\n  var _proto = StyleSheet.prototype;\n\n  _proto.setOptimizeForSpeed = function setOptimizeForSpeed(bool) {\n    invariant$1(typeof bool === \"boolean\", \"`setOptimizeForSpeed` accepts a boolean\");\n    invariant$1(this._rulesCount === 0, \"optimizeForSpeed cannot be when rules have already been inserted\");\n    this.flush();\n    this._optimizeForSpeed = bool;\n    this.inject();\n  };\n\n  _proto.isOptimizeForSpeed = function isOptimizeForSpeed() {\n    return this._optimizeForSpeed;\n  };\n\n  _proto.inject = function inject() {\n    var _this = this;\n\n    invariant$1(!this._injected, \"sheet already injected\");\n    this._injected = true;\n\n    if ( true && this._optimizeForSpeed) {\n      this._tags[0] = this.makeStyleTag(this._name);\n      this._optimizeForSpeed = \"insertRule\" in this.getSheet();\n\n      if (!this._optimizeForSpeed) {\n        if (!isProd) {\n          console.warn(\"StyleSheet: optimizeForSpeed mode not supported falling back to standard mode.\");\n        }\n\n        this.flush();\n        this._injected = true;\n      }\n\n      return;\n    }\n\n    this._serverSheet = {\n      cssRules: [],\n      insertRule: function (rule, index) {\n        if (typeof index === \"number\") {\n          _this._serverSheet.cssRules[index] = {\n            cssText: rule\n          };\n        } else {\n          _this._serverSheet.cssRules.push({\n            cssText: rule\n          });\n        }\n\n        return index;\n      },\n      deleteRule: function (index) {\n        _this._serverSheet.cssRules[index] = null;\n      }\n    };\n  };\n\n  _proto.getSheetForTag = function getSheetForTag(tag) {\n    if (tag.sheet) {\n      return tag.sheet;\n    } // this weirdness brought to you by firefox\n\n\n    for (var i = 0; i < document.styleSheets.length; i++) {\n      if (document.styleSheets[i].ownerNode === tag) {\n        return document.styleSheets[i];\n      }\n    }\n  };\n\n  _proto.getSheet = function getSheet() {\n    return this.getSheetForTag(this._tags[this._tags.length - 1]);\n  };\n\n  _proto.insertRule = function insertRule(rule, index) {\n    invariant$1(isString(rule), \"`insertRule` accepts only strings\");\n\n    if (false) {}\n\n    if (this._optimizeForSpeed) {\n      var sheet = this.getSheet();\n\n      if (typeof index !== \"number\") {\n        index = sheet.cssRules.length;\n      } // this weirdness for perf, and chrome's weird bug\n      // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule\n\n\n      try {\n        sheet.insertRule(rule, index);\n      } catch (error) {\n        if (!isProd) {\n          console.warn(\"StyleSheet: illegal rule: \\n\\n\" + rule + \"\\n\\nSee https://stackoverflow.com/q/20007992 for more info\");\n        }\n\n        return -1;\n      }\n    } else {\n      var insertionPoint = this._tags[index];\n\n      this._tags.push(this.makeStyleTag(this._name, rule, insertionPoint));\n    }\n\n    return this._rulesCount++;\n  };\n\n  _proto.replaceRule = function replaceRule(index, rule) {\n    if (this._optimizeForSpeed || false) {\n      var sheet =  true ? this.getSheet() : 0;\n\n      if (!rule.trim()) {\n        rule = this._deletedRulePlaceholder;\n      }\n\n      if (!sheet.cssRules[index]) {\n        // @TBD Should we throw an error?\n        return index;\n      }\n\n      sheet.deleteRule(index);\n\n      try {\n        sheet.insertRule(rule, index);\n      } catch (error) {\n        if (!isProd) {\n          console.warn(\"StyleSheet: illegal rule: \\n\\n\" + rule + \"\\n\\nSee https://stackoverflow.com/q/20007992 for more info\");\n        } // In order to preserve the indices we insert a deleteRulePlaceholder\n\n\n        sheet.insertRule(this._deletedRulePlaceholder, index);\n      }\n    } else {\n      var tag = this._tags[index];\n      invariant$1(tag, \"old rule at index `\" + index + \"` not found\");\n      tag.textContent = rule;\n    }\n\n    return index;\n  };\n\n  _proto.deleteRule = function deleteRule(index) {\n    if (false) {}\n\n    if (this._optimizeForSpeed) {\n      this.replaceRule(index, \"\");\n    } else {\n      var tag = this._tags[index];\n      invariant$1(tag, \"rule at index `\" + index + \"` not found\");\n      tag.parentNode.removeChild(tag);\n      this._tags[index] = null;\n    }\n  };\n\n  _proto.flush = function flush() {\n    this._injected = false;\n    this._rulesCount = 0;\n\n    if (true) {\n      this._tags.forEach(function (tag) {\n        return tag && tag.parentNode.removeChild(tag);\n      });\n\n      this._tags = [];\n    } else {}\n  };\n\n  _proto.cssRules = function cssRules() {\n    var _this = this;\n\n    if (false) {}\n\n    return this._tags.reduce(function (rules, tag) {\n      if (tag) {\n        rules = rules.concat(Array.prototype.map.call(_this.getSheetForTag(tag).cssRules, function (rule) {\n          return rule.cssText === _this._deletedRulePlaceholder ? null : rule;\n        }));\n      } else {\n        rules.push(null);\n      }\n\n      return rules;\n    }, []);\n  };\n\n  _proto.makeStyleTag = function makeStyleTag(name, cssString, relativeToTag) {\n    if (cssString) {\n      invariant$1(isString(cssString), \"makeStyleTag accepts only strings as second parameter\");\n    }\n\n    var tag = document.createElement(\"style\");\n    if (this._nonce) tag.setAttribute(\"nonce\", this._nonce);\n    tag.type = \"text/css\";\n    tag.setAttribute(\"data-\" + name, \"\");\n\n    if (cssString) {\n      tag.appendChild(document.createTextNode(cssString));\n    }\n\n    var head = document.head || document.getElementsByTagName(\"head\")[0];\n\n    if (relativeToTag) {\n      head.insertBefore(tag, relativeToTag);\n    } else {\n      head.appendChild(tag);\n    }\n\n    return tag;\n  };\n\n  _createClass(StyleSheet, [{\n    key: \"length\",\n    get: function get() {\n      return this._rulesCount;\n    }\n  }]);\n\n  return StyleSheet;\n}();\n\nfunction invariant$1(condition, message) {\n  if (!condition) {\n    throw new Error(\"StyleSheet: \" + message + \".\");\n  }\n}\n\nfunction hash(str) {\n  var _$hash = 5381,\n      i = str.length;\n\n  while (i) {\n    _$hash = _$hash * 33 ^ str.charCodeAt(--i);\n  }\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n  * integers. Since we want the results to be always positive, convert the\n  * signed int to an unsigned by doing an unsigned bitshift. */\n\n\n  return _$hash >>> 0;\n}\n\nvar stringHash = hash;\n\nvar sanitize = function (rule) {\n  return rule.replace(/\\/style/gi, \"\\\\/style\");\n};\n\nvar cache = {};\n/**\n * computeId\n *\n * Compute and memoize a jsx id from a basedId and optionally props.\n */\n\nfunction computeId(baseId, props) {\n  if (!props) {\n    return \"jsx-\" + baseId;\n  }\n\n  var propsToString = String(props);\n  var key = baseId + propsToString;\n\n  if (!cache[key]) {\n    cache[key] = \"jsx-\" + stringHash(baseId + \"-\" + propsToString);\n  }\n\n  return cache[key];\n}\n/**\n * computeSelector\n *\n * Compute and memoize dynamic selectors.\n */\n\n\nfunction computeSelector(id, css) {\n  var selectoPlaceholderRegexp = /__jsx-style-dynamic-selector/g; // Sanitize SSR-ed CSS.\n  // Client side code doesn't need to be sanitized since we use\n  // document.createTextNode (dev) and the CSSOM api sheet.insertRule (prod).\n\n  if (false) {}\n\n  var idcss = id + css;\n\n  if (!cache[idcss]) {\n    cache[idcss] = css.replace(selectoPlaceholderRegexp, id);\n  }\n\n  return cache[idcss];\n}\n\nfunction mapRulesToStyle(cssRules, options) {\n  if (options === void 0) options = {};\n  return cssRules.map(function (args) {\n    var id = args[0];\n    var css = args[1];\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"style\", {\n      id: \"__\" + id,\n      // Avoid warnings upon render with a key\n      key: \"__\" + id,\n      nonce: options.nonce ? options.nonce : undefined,\n      dangerouslySetInnerHTML: {\n        __html: css\n      }\n    });\n  });\n}\n\nvar StyleSheetRegistry = /*#__PURE__*/function () {\n  function StyleSheetRegistry(param) {\n    var ref = param === void 0 ? {} : param,\n        _styleSheet = ref.styleSheet,\n        styleSheet = _styleSheet === void 0 ? null : _styleSheet,\n        _optimizeForSpeed = ref.optimizeForSpeed,\n        optimizeForSpeed = _optimizeForSpeed === void 0 ? false : _optimizeForSpeed;\n    this._sheet = styleSheet || new StyleSheet({\n      name: \"styled-jsx\",\n      optimizeForSpeed: optimizeForSpeed\n    });\n\n    this._sheet.inject();\n\n    if (styleSheet && typeof optimizeForSpeed === \"boolean\") {\n      this._sheet.setOptimizeForSpeed(optimizeForSpeed);\n\n      this._optimizeForSpeed = this._sheet.isOptimizeForSpeed();\n    }\n\n    this._fromServer = undefined;\n    this._indices = {};\n    this._instancesCounts = {};\n  }\n\n  var _proto = StyleSheetRegistry.prototype;\n\n  _proto.add = function add(props) {\n    var _this = this;\n\n    if (undefined === this._optimizeForSpeed) {\n      this._optimizeForSpeed = Array.isArray(props.children);\n\n      this._sheet.setOptimizeForSpeed(this._optimizeForSpeed);\n\n      this._optimizeForSpeed = this._sheet.isOptimizeForSpeed();\n    }\n\n    if ( true && !this._fromServer) {\n      this._fromServer = this.selectFromServer();\n      this._instancesCounts = Object.keys(this._fromServer).reduce(function (acc, tagName) {\n        acc[tagName] = 0;\n        return acc;\n      }, {});\n    }\n\n    var ref = this.getIdAndRules(props),\n        styleId = ref.styleId,\n        rules = ref.rules; // Deduping: just increase the instances count.\n\n    if (styleId in this._instancesCounts) {\n      this._instancesCounts[styleId] += 1;\n      return;\n    }\n\n    var indices = rules.map(function (rule) {\n      return _this._sheet.insertRule(rule);\n    }) // Filter out invalid rules\n    .filter(function (index) {\n      return index !== -1;\n    });\n    this._indices[styleId] = indices;\n    this._instancesCounts[styleId] = 1;\n  };\n\n  _proto.remove = function remove(props) {\n    var _this = this;\n\n    var styleId = this.getIdAndRules(props).styleId;\n    invariant(styleId in this._instancesCounts, \"styleId: `\" + styleId + \"` not found\");\n    this._instancesCounts[styleId] -= 1;\n\n    if (this._instancesCounts[styleId] < 1) {\n      var tagFromServer = this._fromServer && this._fromServer[styleId];\n\n      if (tagFromServer) {\n        tagFromServer.parentNode.removeChild(tagFromServer);\n        delete this._fromServer[styleId];\n      } else {\n        this._indices[styleId].forEach(function (index) {\n          return _this._sheet.deleteRule(index);\n        });\n\n        delete this._indices[styleId];\n      }\n\n      delete this._instancesCounts[styleId];\n    }\n  };\n\n  _proto.update = function update(props, nextProps) {\n    this.add(nextProps);\n    this.remove(props);\n  };\n\n  _proto.flush = function flush() {\n    this._sheet.flush();\n\n    this._sheet.inject();\n\n    this._fromServer = undefined;\n    this._indices = {};\n    this._instancesCounts = {};\n  };\n\n  _proto.cssRules = function cssRules() {\n    var _this = this;\n\n    var fromServer = this._fromServer ? Object.keys(this._fromServer).map(function (styleId) {\n      return [styleId, _this._fromServer[styleId]];\n    }) : [];\n\n    var cssRules1 = this._sheet.cssRules();\n\n    return fromServer.concat(Object.keys(this._indices).map(function (styleId) {\n      return [styleId, _this._indices[styleId].map(function (index) {\n        return cssRules1[index].cssText;\n      }).join(_this._optimizeForSpeed ? \"\" : \"\\n\")];\n    }) // filter out empty rules\n    .filter(function (rule) {\n      return Boolean(rule[1]);\n    }));\n  };\n\n  _proto.styles = function styles(options) {\n    return mapRulesToStyle(this.cssRules(), options);\n  };\n\n  _proto.getIdAndRules = function getIdAndRules(props) {\n    var css = props.children,\n        dynamic = props.dynamic,\n        id = props.id;\n\n    if (dynamic) {\n      var styleId = computeId(id, dynamic);\n      return {\n        styleId: styleId,\n        rules: Array.isArray(css) ? css.map(function (rule) {\n          return computeSelector(styleId, rule);\n        }) : [computeSelector(styleId, css)]\n      };\n    }\n\n    return {\n      styleId: computeId(id),\n      rules: Array.isArray(css) ? css : [css]\n    };\n  };\n  /**\n  * selectFromServer\n  *\n  * Collects style tags from the document with id __jsx-XXX\n  */\n\n\n  _proto.selectFromServer = function selectFromServer() {\n    var elements = Array.prototype.slice.call(document.querySelectorAll('[id^=\"__jsx-\"]'));\n    return elements.reduce(function (acc, element) {\n      var id = element.id.slice(2);\n      acc[id] = element;\n      return acc;\n    }, {});\n  };\n\n  return StyleSheetRegistry;\n}();\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new Error(\"StyleSheetRegistry: \" + message + \".\");\n  }\n}\n\nvar StyleSheetContext = /*#__PURE__*/React.createContext(null);\nStyleSheetContext.displayName = \"StyleSheetContext\";\n\nfunction createStyleRegistry() {\n  return new StyleSheetRegistry();\n}\n\nfunction StyleRegistry(param) {\n  _s();\n\n  var configuredRegistry = param.registry,\n      children = param.children;\n  var rootRegistry = React.useContext(StyleSheetContext);\n  var ref = React.useState(function () {\n    return rootRegistry || configuredRegistry || createStyleRegistry();\n  }),\n      registry = ref[0];\n  return /*#__PURE__*/React__default[\"default\"].createElement(StyleSheetContext.Provider, {\n    value: registry\n  }, children);\n}\n\n_s(StyleRegistry, \"ILN01oarlzSGNVF7PRb26EpDolQ=\");\n\n_c2 = StyleRegistry;\n\nfunction useStyleRegistry() {\n  _s2();\n\n  return React.useContext(StyleSheetContext);\n} // Opt-into the new `useInsertionEffect` API in React 18, fallback to `useLayoutEffect`.\n// https://github.com/reactwg/react-18/discussions/110\n\n\n_s2(useStyleRegistry, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar useInsertionEffect = React__default[\"default\"].useInsertionEffect || React__default[\"default\"].useLayoutEffect;\nvar defaultRegistry =  true ? createStyleRegistry() : 0;\n\nfunction JSXStyle(props) {\n  _s3();\n\n  var registry = defaultRegistry ? defaultRegistry : useStyleRegistry(); // If `registry` does not exist, we do nothing here.\n\n  if (!registry) {\n    return null;\n  }\n\n  if (false) {}\n\n  useInsertionEffect(function () {\n    registry.add(props);\n    return function () {\n      registry.remove(props);\n    }; // props.children can be string[], will be striped since id is identical\n  }, [props.id, String(props.dynamic)]);\n  return null;\n}\n\n_s3(JSXStyle, \"48Sqj1BUqkshsPdz6NEWXDn8pF4=\", false, function () {\n  return [useStyleRegistry, useInsertionEffect];\n});\n\n_c3 = JSXStyle;\n\nJSXStyle.dynamic = function (info) {\n  return info.map(function (tagInfo) {\n    var baseId = tagInfo[0];\n    var props = tagInfo[1];\n    return computeId(baseId, props);\n  }).join(\" \");\n};\n\nexports.StyleRegistry = StyleRegistry;\nexports.createStyleRegistry = createStyleRegistry;\nexports.style = JSXStyle;\nexports.useStyleRegistry = useStyleRegistry;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"React__default\");\n$RefreshReg$(_c2, \"StyleRegistry\");\n$RefreshReg$(_c3, \"JSXStyle\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/styled-jsx/dist/index/index.js\n"));

/***/ }),

/***/ "./node_modules/styled-jsx/style.js":
/*!******************************************!*\
  !*** ./node_modules/styled-jsx/style.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/index */ \"./node_modules/styled-jsx/dist/index/index.js\").style;\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGVkLWpzeC9zdHlsZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsK0dBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N0eWxlZC1qc3gvc3R5bGUuanM/MzcwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9pbmRleCcpLnN0eWxlXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJzdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/styled-jsx/style.js\n"));

/***/ }),

/***/ "./src/components/atoms/GoogleBtn.tsx":
/*!********************************************!*\
  !*** ./src/components/atoms/GoogleBtn.tsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__);\nvar _jsxFileName = \"/Users/it222282/Desktop/works/snap-now/client/src/components/atoms/GoogleBtn.tsx\";\n\n\n\n\nconst GoogleButton = () => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"button\", {\n  className: \"jsx-648955306\" + \" \" + \"google-button\",\n  children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    preserveAspectRatio: \"xMidYMid\",\n    viewBox: \"0 0 256 262\",\n    className: \"jsx-648955306\" + \" \" + \"google-icon\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, undefined), \"Continue with Google\", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)((styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default()), {\n    id: \"648955306\",\n    children: \".google-button.jsx-648955306{max-width:320px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0.5rem 1.4rem;font-size:0.875rem;line-height:1.25rem;font-weight:700;text-align:center;text-transform:uppercase;border-radius:0.5rem;border:1px solid rgba(0,0,0,0.25);gap:0.75rem;color:rgb(65,63,63);background-color:#fff;cursor:pointer;-webkit-transition:all 0.3s ease;transition:all 0.3s ease;}.google-button.jsx-648955306:hover{-webkit-transform:scale(1.02);-ms-transform:scale(1.02);transform:scale(1.02);}.google-icon.jsx-648955306{height:24px;margin-right:8px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9pdDIyMjI4Mi9EZXNrdG9wL3dvcmtzL3NuYXAtbm93L2NsaWVudC9zcmMvY29tcG9uZW50cy9hdG9tcy9Hb29nbGVCdG4udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWFnQixBQUd5QixBQW1CTSxBQUlWLFlBQ0ssSUF2QkosYUF3QmYsaURBTEEsWUFsQnFCLDZGQUNHLHNCQUNILG1CQUNDLG9CQUNKLGdCQUNFLGtCQUNPLHlCQUNKLHFCQUNnQixrQ0FDekIsWUFDVSxvQkFDQSxzQkFDUCxlQUNVLDBEQUMzQiIsImZpbGUiOiIvVXNlcnMvaXQyMjIyODIvRGVza3RvcC93b3Jrcy9zbmFwLW5vdy9jbGllbnQvc3JjL2NvbXBvbmVudHMvYXRvbXMvR29vZ2xlQnRuLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEdvb2dsZUJ1dHRvbiA9ICgpID0+IChcbiAgPGJ1dHRvbiBjbGFzc05hbWU9XCJnb29nbGUtYnV0dG9uXCI+XG4gICAgPHN2Z1xuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWRcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNTYgMjYyXCJcbiAgICAgIGNsYXNzTmFtZT1cImdvb2dsZS1pY29uXCJcbiAgICA+XG4gICAgICB7LyogU1ZHIHBhdGhzIG9taXR0ZWQgZm9yIGJyZXZpdHkgKi99XG4gICAgPC9zdmc+XG4gICAgQ29udGludWUgd2l0aCBHb29nbGVcbiAgICA8c3R5bGUganN4PntgXG4gICAgICAuZ29vZ2xlLWJ1dHRvbiB7XG4gICAgICAgIG1heC13aWR0aDogMzIwcHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIHBhZGRpbmc6IDAuNXJlbSAxLjRyZW07XG4gICAgICAgIGZvbnQtc2l6ZTogMC44NzVyZW07XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjI1cmVtO1xuICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjI1KTtcbiAgICAgICAgZ2FwOiAwLjc1cmVtO1xuICAgICAgICBjb2xvcjogcmdiKDY1LCA2MywgNjMpO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2U7XG4gICAgICB9XG5cbiAgICAgIC5nb29nbGUtYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjAyKTtcbiAgICAgIH1cblxuICAgICAgLmdvb2dsZS1pY29uIHtcbiAgICAgICAgaGVpZ2h0OiAyNHB4O1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICAgIH1cbiAgICBgfTwvc3R5bGU+XG4gIDwvYnV0dG9uPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgR29vZ2xlQnV0dG9uO1xuIl19 */\\n/*@ sourceURL=/Users/it222282/Desktop/works/snap-now/client/src/components/atoms/GoogleBtn.tsx */\"\n  }, void 0, false, void 0, undefined)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, undefined);\n\n_c = GoogleButton;\n/* harmony default export */ __webpack_exports__[\"default\"] = (GoogleButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleButton\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hdG9tcy9Hb29nbGVCdG4udHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7QUFFQSxNQUFNQyxZQUFZLEdBQUcsbUJBQ25CO0VBQUEsbUNBQWtCLGVBQWxCO0VBQUEsd0JBQ0U7SUFDRSxLQUFLLEVBQUMsNEJBRFI7SUFFRSxtQkFBbUIsRUFBQyxVQUZ0QjtJQUdFLE9BQU8sRUFBQyxhQUhWO0lBQUEsbUNBSVk7RUFKWjtJQUFBO0lBQUE7SUFBQTtFQUFBLGFBREY7SUFBQTtJQUFBO0VBQUE7QUFBQTtFQUFBO0VBQUE7RUFBQTtBQUFBLGFBREY7O0tBQU1BO0FBMkNOLCtEQUFlQSxZQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL2F0b21zL0dvb2dsZUJ0bi50c3g/ZGJiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBHb29nbGVCdXR0b24gPSAoKSA9PiAoXG4gIDxidXR0b24gY2xhc3NOYW1lPVwiZ29vZ2xlLWJ1dHRvblwiPlxuICAgIDxzdmdcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjU2IDI2MlwiXG4gICAgICBjbGFzc05hbWU9XCJnb29nbGUtaWNvblwiXG4gICAgPlxuICAgICAgey8qIFNWRyBwYXRocyBvbWl0dGVkIGZvciBicmV2aXR5ICovfVxuICAgIDwvc3ZnPlxuICAgIENvbnRpbnVlIHdpdGggR29vZ2xlXG4gICAgPHN0eWxlIGpzeD57YFxuICAgICAgLmdvb2dsZS1idXR0b24ge1xuICAgICAgICBtYXgtd2lkdGg6IDMyMHB4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBwYWRkaW5nOiAwLjVyZW0gMS40cmVtO1xuICAgICAgICBmb250LXNpemU6IDAuODc1cmVtO1xuICAgICAgICBsaW5lLWhlaWdodDogMS4yNXJlbTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAwLjVyZW07XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4yNSk7XG4gICAgICAgIGdhcDogMC43NXJlbTtcbiAgICAgICAgY29sb3I6IHJnYig2NSwgNjMsIDYzKTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlO1xuICAgICAgfVxuXG4gICAgICAuZ29vZ2xlLWJ1dHRvbjpob3ZlciB7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wMik7XG4gICAgICB9XG5cbiAgICAgIC5nb29nbGUtaWNvbiB7XG4gICAgICAgIGhlaWdodDogMjRweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgICB9XG4gICAgYH08L3N0eWxlPlxuICA8L2J1dHRvbj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEdvb2dsZUJ1dHRvbjtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIkdvb2dsZUJ1dHRvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/atoms/GoogleBtn.tsx\n"));

/***/ })

});